xmin <- min(xVal, na.rm = TRUE)
xmax <- max(xVal, na.rm = TRUE)
xrange <- c(xmin - 0.01 * (xmax - xmin), xmax + 0.01 *
(xmax - xmin))
ymin <- min(yVal, na.rm = TRUE)
ymax <- max(yVal, na.rm = TRUE)
yrange <- c(ymin - 0.01 * (ymax - ymin), ymax + 0.01 *
(ymax - ymin))
p <- ggally_text(label = paste("Corr:\n", signif(cor_fn(xVal,
yVal), sgnf), sep = "", collapse = ""), mapping, xP = 0.5,
yP = 0.5, xrange = xrange, yrange = yrange, ...) +
theme(legend.position = "none")
p
}
}
learning2014 <- read.csv("~/GitHub/IODS-final/data/learning2014.csv")
ggpairs(learning2014, mapping = aes(col=Gender, alpha=0.1), lower = list(combo = wrap("facethist", bins = 20)),  upper = list(continuous = wrap("cor", size = 1.7, mycor, sgnf=2)))+
theme(strip.text = element_text(size=6),
strip.text.y = element_text(angle=0),
axis.text = element_text(size=6),
strip.text.x = element_text(angle=45))+
ggtitle("Figure 1: Interactions in Learning2014 data")
learning2014 <- read.csv("~/GitHub/IODS-final/data/learning2014.csv")
ggpairs(learning2014, mapping = aes(col=Gender, alpha=0.1), lower = list(combo = wrap("facethist", bins = 20)),  upper = list(continuous = wrap(size = 1.7, mycor, sgnf=2)))+
theme(strip.text = element_text(size=6),
strip.text.y = element_text(angle=0),
axis.text = element_text(size=6),
strip.text.x = element_text(angle=45))+
ggtitle("Figure 1: Interactions in Learning2014 data")
?kruskal.test
kruskal.test(learning2014$OrganizedStudying, learning2014$Gender)
wilcox.test(learning2014$OrganizedStudying~ learning2014$Gender)
wilcox.test(learning2014$Attitude~ learning2014$Gender)
hist(learning2014$OrganizedStudying~ learning2014$Gender)
hist(learning2014$OrganizedStudying)
hist(learning2014$Attitude)
plot(density(learning2014$Attitude[learning2014$Gender=='M',], col='blue'))
plot(density(learning2014$Attitude[learning2014$Gender=='M'], col='blue'))
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue')
plot(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
lines(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue')
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue')
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue', main="Distributions of `Attitude` by gender")
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue', main="Distributions of `Attitude` by gender")
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
?legend
legend("topright", col=c("red", "blue"), legend = c('F', 'M'))
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue', main="Distributions of `Attitude` by gender")
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
legend("topright", col=c("red", "blue"), legend = c('F', 'M'))
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue', main="Distributions of `Attitude` by gender")
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
legend("topright", col=c("red", "blue"), legend = c('F', 'M'), lty=1)
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue', main="Figure 5: Distribution of Attitude by gender", xlab="Attitude points")
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
legend("topright", col=c("red", "blue"), legend = c('Female', 'Male'), lty=1)
hist(learning2014$Points)
hist(learning2014$Points, bins=12)
hist(learning2014$Points, breaks =12)
abline(v=median(learning2014$Points))
abline(v=mean(learning2014$Points))
table(learning2014$Points)
(median(learning2014$Points))
an.data$HighPoints <- an.data$Points > median(an.data$Points)
# Author: Riku Laine
# Email: riku.laine@helsinki.fi
# Date: Mon Dec 11 13:43:43 2017
# Project name: IODS final project - Data wrangling
# Description
# This script is for creating the "learning2014" data set for Helsinki
# University's Introduction to Open data Science course. The data is acquired
# from http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt. Google's
# R Style Guide was tried to be followed in the making of this script.
# --------------
# Author:
# Date:
# Modification:
# --------------
# Preparations (source() and library())
# Importing libraries
library(MASS)
library(dplyr)
# Reading in the data
url <- "http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt"
learning2014 <- read.table(file = url, sep = '\t', header = T)
# Let's select the base variables gender, Age, Attitude and Points from
# the data frame learning2014 to create an.data.
an.data <- dplyr::select(learning2014, gender, Age, Attitude, Points)
# Constructing the variables as was instructed in the meta page
# here: http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS2-meta.txt.
# I decided to construct the partial variables to get more variables.
# Vectorize the original data set to simplify the following calls.
attach(learning2014)
an.data <- mutate(an.data, SeekingMeaning      =  (D03+D11+D19+D27)/4)
an.data <- mutate(an.data, RelatingIdeas       =  (D07+D14+D22+D30)/4)
an.data <- mutate(an.data, UseOfEvidence       =  (D06+D15+D23+D31)/4)
an.data <- mutate(an.data, LackOfPurpose       =  (SU02+SU10+SU18+SU26)/4)
an.data <- mutate(an.data, UnrelatedMemorising =  (SU05+SU13+SU21+SU29)/4)
an.data <- mutate(an.data, SyllabusBoundness   =  (SU08+SU16+SU24+SU32)/4)
an.data <- mutate(an.data, OrganizedStudying   =  (ST01+ST09+ST17+ST25)/4)
an.data <- mutate(an.data, TimeManagement      =  (ST04+ST12+ST20+ST28)/4)
# Remove the above created vectors.
detach(learning2014)
# Omit observations which had zero points from the final exam.
an.data <- an.data[an.data$Points!=0,]
# Create binarized variable for logistic regression
an.data$HighPoints <- an.data$Points > median(an.data$Points)
# Fix the first column name to be upper case as the others.
colnames(an.data)[1] <- "Gender"
# Set working directory and write the an.data data frame there excluding row names.
setwd(dir = "~/GitHub/IODS-final/data/")
write.csv(an.data, file = "learning2014.csv", row.names = F)
library(knitr)
library(ggplot2)
library(GGally)
library(corrplot)
opts_chunk$set(message = F)
opts_chunk$set(warning = F)
opts_chunk$set(out.width = "100%")
mycor <- function(data, mapping, alignPercent = 0.6, method = "pearson",
use = "complete.obs", corAlignPercent = NULL, corMethod = NULL,
corUse = NULL, sgnf=3, ...) {
if (!is.null(corAlignPercent)) {
stop("'corAlignPercent' is deprecated.  Please use argument 'alignPercent'")
}
if (!is.null(corMethod)) {
stop("'corMethod' is deprecated.  Please use argument 'method'")
}
if (!is.null(corUse)) {
stop("'corUse' is deprecated.  Please use argument 'use'")
}
useOptions <- c("all.obs", "complete.obs", "pairwise.complete.obs",
"everything", "na.or.complete")
use <- pmatch(use, useOptions)
if (is.na(use)) {
warning("correlation 'use' not found.  Using default value of 'all.obs'")
use <- useOptions[1]
} else {
use <- useOptions[use]
}
cor_fn <- function(x, y) {
cor(x, y, method = method, use = use)
}
xCol <- deparse(mapping$x)
yCol <- deparse(mapping$y)
if (GGally:::is_date(data[[xCol]]) || GGally:::is_date(data[[yCol]])) {
if (!identical(class(data), "data.frame")) {
data <- fix_data(data)
}
for (col in c(xCol, yCol)) {
if (GGally:::is_date(data[[col]])) {
data[[col]] <- as.numeric(data[[col]])
}
}
}
if (is.numeric(GGally:::eval_data_col(data, mapping$colour))) {
stop("ggally_cor: mapping color column must be categorical, not numeric")
}
colorCol <- deparse(mapping$colour)
singleColorCol <- ifelse(is.null(colorCol), NULL, paste(colorCol,
collapse = ""))
if (use %in% c("complete.obs", "pairwise.complete.obs", "na.or.complete")) {
if (length(colorCol) > 0) {
if (singleColorCol %in% colnames(data)) {
rows <- complete.cases(data[c(xCol, yCol, colorCol)])
} else {
rows <- complete.cases(data[c(xCol, yCol)])
}
} else {
rows <- complete.cases(data[c(xCol, yCol)])
}
if (any(!rows)) {
total <- sum(!rows)
if (total > 1) {
warning("Removed ", total, " rows containing missing values")
} else if (total == 1) {
warning("Removing 1 row that contained a missing value")
}
}
data <- data[rows, ]
}
xVal <- data[[xCol]]
yVal <- data[[yCol]]
if (length(names(mapping)) > 0) {
for (i in length(names(mapping)):1) {
tmp_map_val <- deparse(mapping[names(mapping)[i]][[1]])
if (tmp_map_val[length(tmp_map_val)] %in% colnames(data))
mapping[[names(mapping)[i]]] <- NULL
if (length(names(mapping)) < 1) {
mapping <- NULL
break
}
}
}
if (length(colorCol) < 1) {
colorCol <- "ggally_NO_EXIST"
}
if ((singleColorCol != "ggally_NO_EXIST") && (singleColorCol %in%
colnames(data))) {
cord <- plyr::ddply(data, c(colorCol), function(x) {
cor_fn(x[[xCol]], x[[yCol]])
})
colnames(cord)[2] <- "ggally_cor"
cord$ggally_cor <- signif(as.numeric(cord$ggally_cor),
sgnf)
lev <- levels(data[[colorCol]])
ord <- rep(-1, nrow(cord))
for (i in 1:nrow(cord)) {
for (j in seq_along(lev)) {
if (identical(as.character(cord[i, colorCol]),
as.character(lev[j]))) {
ord[i] <- j
}
}
}
cord <- cord[order(ord[ord >= 0]), ]
cord$label <- GGally:::str_c(cord[[colorCol]], ": ", cord$ggally_cor)
xmin <- min(xVal, na.rm = TRUE)
xmax <- max(xVal, na.rm = TRUE)
xrange <- c(xmin - 0.01 * (xmax - xmin), xmax + 0.01 *
(xmax - xmin))
ymin <- min(yVal, na.rm = TRUE)
ymax <- max(yVal, na.rm = TRUE)
yrange <- c(ymin - 0.01 * (ymax - ymin), ymax + 0.01 *
(ymax - ymin))
p <- ggally_text(label = GGally:::str_c("Corr: ", signif(cor_fn(xVal,
yVal), sgnf)), mapping = mapping, xP = 0.5, yP = 0.9,
xrange = xrange, yrange = yrange, color = "black",
...) + theme(legend.position = "none")
xPos <- rep(alignPercent, nrow(cord)) * diff(xrange) +
min(xrange, na.rm = TRUE)
yPos <- seq(from = 0.9, to = 0.2, length.out = nrow(cord) +
1)
yPos <- yPos * diff(yrange) + min(yrange, na.rm = TRUE)
yPos <- yPos[-1]
cordf <- data.frame(xPos = xPos, yPos = yPos, labelp = cord$label)
cordf$labelp <- factor(cordf$labelp, levels = cordf$labelp)
p <- p + geom_text(data = cordf, aes(x = xPos, y = yPos,
label = labelp, color = labelp), hjust = 1, ...)
p
}  else {
xmin <- min(xVal, na.rm = TRUE)
xmax <- max(xVal, na.rm = TRUE)
xrange <- c(xmin - 0.01 * (xmax - xmin), xmax + 0.01 *
(xmax - xmin))
ymin <- min(yVal, na.rm = TRUE)
ymax <- max(yVal, na.rm = TRUE)
yrange <- c(ymin - 0.01 * (ymax - ymin), ymax + 0.01 *
(ymax - ymin))
p <- ggally_text(label = paste("Corr:\n", signif(cor_fn(xVal,
yVal), sgnf), sep = "", collapse = ""), mapping, xP = 0.5,
yP = 0.5, xrange = xrange, yrange = yrange, ...) +
theme(legend.position = "none")
p
}
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
learning2014 <- read.csv("~/GitHub/IODS-final/data/learning2014.csv")
ggpairs(learning2014[,-13], mapping = aes(col=Gender, alpha=0.1), lower = list(combo = wrap("facethist", bins = 20)),  upper = list(continuous = wrap(size = 1.7, mycor, sgnf=2)))+
theme(strip.text = element_text(size=6),
strip.text.y = element_text(angle=0),
axis.text = element_text(size=6),
strip.text.x = element_text(angle=45))+
ggtitle("Figure 1: Interactions in Learning2014 data")
corrplot(cor(learning2014[, -c(1, 13)]), type = "lower", diag = T, tl.col='black', tl.srt = 0.1, tl.offset = 1,
title = "Fig. 2: Correlations of learning2014 data")
p1 <- ggplot(learning2014, aes(x=Gender, y=Attitude, fill=Gender))+
geom_boxplot()+
geom_jitter(position=position_jitter(0.1), alpha=.4)+ggtitle("Gender differences", subtitle = "Fig. 3 Attitude")
p2 <- ggplot(learning2014, aes(x=Gender, y=OrganizedStudying, fill=Gender))+
geom_boxplot()+
geom_jitter(position=position_jitter(0.1), alpha=.4)+ggtitle("", subtitle = "Fig. 4 OrganizedStudying")
multiplot(p1, p2, cols=2)
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue', main="Figure 5: Distribution of Attitude by gender", xlab="Attitude points")
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
legend("topright", col=c("red", "blue"), legend = c('Female', 'Male'), lty=1)
colnames(learning2014)
cat(colnames(learning2014))
cat(colnames(learning2014), sep="\' \'")
cat(colnames(learning2014), sep="\', \'")
cat(colnames(learning2014), sep="+")
cat(colnames(learning2014), sep=" + ")
model <- glm(HighPoints ~ Gender + Age + Attitude + Points + SeekingMeaning + RelatingIdeas + UseOfEvidence + LackOfPurpose + UnrelatedMemorising + SyllabusBoundness + OrganizedStudying + TimeManagement, family = "binomial")
library(knitr)
library(ggplot2)
library(GGally)
library(corrplot)
opts_chunk$set(message = F)
opts_chunk$set(warning = F)
opts_chunk$set(out.width = "100%")
mycor <- function(data, mapping, alignPercent = 0.6, method = "pearson",
use = "complete.obs", corAlignPercent = NULL, corMethod = NULL,
corUse = NULL, sgnf=3, ...) {
if (!is.null(corAlignPercent)) {
stop("'corAlignPercent' is deprecated.  Please use argument 'alignPercent'")
}
if (!is.null(corMethod)) {
stop("'corMethod' is deprecated.  Please use argument 'method'")
}
if (!is.null(corUse)) {
stop("'corUse' is deprecated.  Please use argument 'use'")
}
useOptions <- c("all.obs", "complete.obs", "pairwise.complete.obs",
"everything", "na.or.complete")
use <- pmatch(use, useOptions)
if (is.na(use)) {
warning("correlation 'use' not found.  Using default value of 'all.obs'")
use <- useOptions[1]
} else {
use <- useOptions[use]
}
cor_fn <- function(x, y) {
cor(x, y, method = method, use = use)
}
xCol <- deparse(mapping$x)
yCol <- deparse(mapping$y)
if (GGally:::is_date(data[[xCol]]) || GGally:::is_date(data[[yCol]])) {
if (!identical(class(data), "data.frame")) {
data <- fix_data(data)
}
for (col in c(xCol, yCol)) {
if (GGally:::is_date(data[[col]])) {
data[[col]] <- as.numeric(data[[col]])
}
}
}
if (is.numeric(GGally:::eval_data_col(data, mapping$colour))) {
stop("ggally_cor: mapping color column must be categorical, not numeric")
}
colorCol <- deparse(mapping$colour)
singleColorCol <- ifelse(is.null(colorCol), NULL, paste(colorCol,
collapse = ""))
if (use %in% c("complete.obs", "pairwise.complete.obs", "na.or.complete")) {
if (length(colorCol) > 0) {
if (singleColorCol %in% colnames(data)) {
rows <- complete.cases(data[c(xCol, yCol, colorCol)])
} else {
rows <- complete.cases(data[c(xCol, yCol)])
}
} else {
rows <- complete.cases(data[c(xCol, yCol)])
}
if (any(!rows)) {
total <- sum(!rows)
if (total > 1) {
warning("Removed ", total, " rows containing missing values")
} else if (total == 1) {
warning("Removing 1 row that contained a missing value")
}
}
data <- data[rows, ]
}
xVal <- data[[xCol]]
yVal <- data[[yCol]]
if (length(names(mapping)) > 0) {
for (i in length(names(mapping)):1) {
tmp_map_val <- deparse(mapping[names(mapping)[i]][[1]])
if (tmp_map_val[length(tmp_map_val)] %in% colnames(data))
mapping[[names(mapping)[i]]] <- NULL
if (length(names(mapping)) < 1) {
mapping <- NULL
break
}
}
}
if (length(colorCol) < 1) {
colorCol <- "ggally_NO_EXIST"
}
if ((singleColorCol != "ggally_NO_EXIST") && (singleColorCol %in%
colnames(data))) {
cord <- plyr::ddply(data, c(colorCol), function(x) {
cor_fn(x[[xCol]], x[[yCol]])
})
colnames(cord)[2] <- "ggally_cor"
cord$ggally_cor <- signif(as.numeric(cord$ggally_cor),
sgnf)
lev <- levels(data[[colorCol]])
ord <- rep(-1, nrow(cord))
for (i in 1:nrow(cord)) {
for (j in seq_along(lev)) {
if (identical(as.character(cord[i, colorCol]),
as.character(lev[j]))) {
ord[i] <- j
}
}
}
cord <- cord[order(ord[ord >= 0]), ]
cord$label <- GGally:::str_c(cord[[colorCol]], ": ", cord$ggally_cor)
xmin <- min(xVal, na.rm = TRUE)
xmax <- max(xVal, na.rm = TRUE)
xrange <- c(xmin - 0.01 * (xmax - xmin), xmax + 0.01 *
(xmax - xmin))
ymin <- min(yVal, na.rm = TRUE)
ymax <- max(yVal, na.rm = TRUE)
yrange <- c(ymin - 0.01 * (ymax - ymin), ymax + 0.01 *
(ymax - ymin))
p <- ggally_text(label = GGally:::str_c("Corr: ", signif(cor_fn(xVal,
yVal), sgnf)), mapping = mapping, xP = 0.5, yP = 0.9,
xrange = xrange, yrange = yrange, color = "black",
...) + theme(legend.position = "none")
xPos <- rep(alignPercent, nrow(cord)) * diff(xrange) +
min(xrange, na.rm = TRUE)
yPos <- seq(from = 0.9, to = 0.2, length.out = nrow(cord) +
1)
yPos <- yPos * diff(yrange) + min(yrange, na.rm = TRUE)
yPos <- yPos[-1]
cordf <- data.frame(xPos = xPos, yPos = yPos, labelp = cord$label)
cordf$labelp <- factor(cordf$labelp, levels = cordf$labelp)
p <- p + geom_text(data = cordf, aes(x = xPos, y = yPos,
label = labelp, color = labelp), hjust = 1, ...)
p
}  else {
xmin <- min(xVal, na.rm = TRUE)
xmax <- max(xVal, na.rm = TRUE)
xrange <- c(xmin - 0.01 * (xmax - xmin), xmax + 0.01 *
(xmax - xmin))
ymin <- min(yVal, na.rm = TRUE)
ymax <- max(yVal, na.rm = TRUE)
yrange <- c(ymin - 0.01 * (ymax - ymin), ymax + 0.01 *
(ymax - ymin))
p <- ggally_text(label = paste("Corr:\n", signif(cor_fn(xVal,
yVal), sgnf), sep = "", collapse = ""), mapping, xP = 0.5,
yP = 0.5, xrange = xrange, yrange = yrange, ...) +
theme(legend.position = "none")
p
}
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
learning2014 <- read.csv("~/GitHub/IODS-final/data/learning2014.csv")
ggpairs(learning2014[,-13], mapping = aes(col=Gender, alpha=0.1), lower = list(combo = wrap("facethist", bins = 20)),  upper = list(continuous = wrap(size = 1.7, mycor, sgnf=2)))+
theme(strip.text = element_text(size=6),
strip.text.y = element_text(angle=0),
axis.text = element_text(size=6),
strip.text.x = element_text(angle=45))+
ggtitle("Figure 1: Interactions in Learning2014 data")
corrplot(cor(learning2014[, -c(1, 13)]), type = "lower", diag = T, tl.col='black', tl.srt = 0.1, tl.offset = 1,
title = "Fig. 2: Correlations of learning2014 data")
p1 <- ggplot(learning2014, aes(x=Gender, y=Attitude, fill=Gender))+
geom_boxplot()+
geom_jitter(position=position_jitter(0.1), alpha=.4)+ggtitle("Gender differences", subtitle = "Fig. 3 Attitude")
p2 <- ggplot(learning2014, aes(x=Gender, y=OrganizedStudying, fill=Gender))+
geom_boxplot()+
geom_jitter(position=position_jitter(0.1), alpha=.4)+ggtitle("", subtitle = "Fig. 4 OrganizedStudying")
multiplot(p1, p2, cols=2)
plot(density(learning2014$Attitude[learning2014$Gender=='M']), col='blue', main="Figure 5: Distribution of Attitude by gender", xlab="Attitude points")
lines(density(learning2014$Attitude[learning2014$Gender=='F']), col='red')
legend("topright", col=c("red", "blue"), legend = c('Female', 'Male'), lty=1)
model <- glm(HighPoints ~ Gender + Age + Attitude + Points + SeekingMeaning + RelatingIdeas + UseOfEvidence + LackOfPurpose + UnrelatedMemorising + SyllabusBoundness + OrganizedStudying + TimeManagement, family = "binomial")
colnames(learning2014)
model <- glm(HighPoints ~ Gender + Age + Attitude + Points + SeekingMeaning + RelatingIdeas + UseOfEvidence + LackOfPurpose + UnrelatedMemorising + SyllabusBoundness + OrganizedStudying + TimeManagement, data = learning2014, family = "binomial")
model <- glm(HighPoints ~ Gender + Age + Attitude + SeekingMeaning + RelatingIdeas + UseOfEvidence + LackOfPurpose + UnrelatedMemorising + SyllabusBoundness + OrganizedStudying + TimeManagement, data = learning2014, family = "binomial")
summary(model)
plot(model)
plot(model, which=4)
model <- glm(HighPoints ~ Gender + Age + SeekingMeaning + RelatingIdeas + UseOfEvidence + LackOfPurpose + UnrelatedMemorising + SyllabusBoundness + OrganizedStudying + TimeManagement, data = learning2014, family = "binomial")
summary(model)
